* Abstract
This library is a bespoke automated and parallelised benchmarking framework to do memory profiling (native and python allocations via [[https://github.com/bloomberg/memray][memray]]), CPU profiling (via [[https://github.com/mstange/samply][samply]]) across [[https://github.com/sympy/sympy][SymPy]] and [[https://github.com/flintlib/python-flint][python-flint]], and benchmarking across =SymPy=, =python-flint=, [[https://www.sagemath.org/][SageMath]], and [[https://www.wolfram.com/mathematica/][Mathematica]]. Including all the different =SymPy= ground types (=python=, =flint=, and =gmpy=), as well as the two different =SymPy= multivariate polynomial implementations (=DMP= and =PolyElement=).

This is not intended to be used outside of these benchmarks.

* Polynomial generation
This library also has the ability to generate random polynomials with various parameters include
- Number of generators
- Number of terms
- Coefficient ranges
- Exponent ranges

All arguments accept comma separated ranges in the form of =start-stop:step=. Arguments are =eval='d.

The cross product of all arguments are is taken. Be careful.
** Generate polynomials
#+begin_src shell :results verbatim
  python -c "from src.benchmarking.cli import *; gen_polys()" \
      /tmp/ \
      --generators "1" \
      --terms "5" \
      --coefficients "1-100" \
      --exponents "0-10" \
      --seed 1234 2> /dev/null

  python -c "from src.benchmarking.cli import *; gen_polys()" /tmp/polys.pickle --describe
#+end_src

#+RESULTS:
#+begin_example
   generators  terms   exp_range  coeff_range  gens                 poly
0           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(7,): 15, (0,):...
1           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(0,): 45, (9,):...
2           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(2,): 92, (1,):...
3           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(1,): 83, (9,):...
4           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(4,): 62, (5,):...
5           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(0,): 66, (1,):...
6           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(0,): 10, (9,):...
7           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(5,): 99, (1,):...
8           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(4,): 20, (0,):...
9           1      5  (0, 10, 1)  (1, 100, 1)  [x0]  {(9,): 50, (5,):...
#+end_example

#+begin_src shell :results verbatim
  python -c "from src.benchmarking.cli import *; gen_polys()" \
     ./ \
     --generators   "1-5, 6-13:2" \
     --terms        "10" \
     --coefficients "1-1000" \
     --exponents    "0-1000" \
     --number 1 \
     --seed 12 2> /dev/null && \
  python -c "from src.benchmarking.cli import *; gen_polys()" \
     ./ \
     --generators   "1-5, 6-13:2" \
     --terms        "10" \
     --coefficients "2**65-2**66" \
     --exponents    "0-1000" \
     --number 1 \
     --seed 34 \
     --append 2> /dev/null && \
  python -c "from src.benchmarking.cli import *; gen_polys()" \
     ./ \
     --generators   "5" \
     --terms        "4-33:4" \
     --coefficients "1-1000" \
     --exponents    "0-1000" \
     --number 1 \
     --seed 45 \
     --append 2> /dev/null && \
  python -c "from src.benchmarking.cli import *; gen_polys()" \
     ./ \
     --generators   "5" \
     --terms        "4-33:4" \
     --coefficients "2**65-2**66" \
     --exponents    "0-1000" \
     --number 1 \
     --seed 67 \
     --append 2> /dev/null && \
  python -c "from src.benchmarking.cli import *; gen_polys()" ./polys.pickle --describe
#+end_src

#+RESULTS:
#+begin_example
    generators  terms     exp_range          coeff_range                 gens                 poly
0            1     10  (0, 1000, 1)         (1, 1000, 1)                 [x0]  {(485,): 276, (6...
1            2     10  (0, 1000, 1)         (1, 1000, 1)             [x0, x1]  {(1, 677): 640, ...
2            3     10  (0, 1000, 1)         (1, 1000, 1)         [x0, x1, x2]  {(521, 228, 93):...
3            4     10  (0, 1000, 1)         (1, 1000, 1)     [x0, x1, x2, x3]  {(990, 196, 999,...
4            6     10  (0, 1000, 1)         (1, 1000, 1)  [x0, x1, x2, x3,...  {(37, 443, 283, ...
..         ...    ...           ...                  ...                  ...                  ...
27           5     16  (0, 1000, 1)  (368934881474191...  [x0, x1, x2, x3,...  {(956, 486, 317,...
28           5     20  (0, 1000, 1)  (368934881474191...  [x0, x1, x2, x3,...  {(793, 787, 942,...
29           5     24  (0, 1000, 1)  (368934881474191...  [x0, x1, x2, x3,...  {(843, 288, 152,...
30           5     28  (0, 1000, 1)  (368934881474191...  [x0, x1, x2, x3,...  {(434, 762, 414,...
31           5     32  (0, 1000, 1)  (368934881474191...  [x0, x1, x2, x3,...  {(192, 382, 783,...
#+end_example

